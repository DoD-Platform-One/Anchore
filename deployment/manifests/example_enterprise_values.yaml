# Default values for anchore_engine chart.

# Anchore engine has a dependency on Postgresql, configure here
postgresql:
  # To use an external DB or Google CloudSQL in GKE, uncomment & set 'enabled: false'
  # externalEndpoint, postgresUser, postgresPassword & postgresDatabase are required values for external postgres
  enabled: false
  image: registry1.dsop.io/ironbank/opensource/postgres/postgresql12:12.4
  postgresUser: anchore
  postgresDatabase: anchore
  externalEndpoint: db.example.com

# Global configuration shared by all anchore-engine services.
anchoreGlobal:
  # Image used for all anchore engine deployments (excluding enterprise components).
  image: registry1.dsop.io/ironbank/anchore/enterprise/enterprise:2.4.0
  imagePullPolicy: IfNotPresent
  # Set image pull secret name if using an anchore-engine image from a private registry
  imagePullSecretName: registry1-read-creds


# Enable prometheus metrics
  enableMetrics: true

  # Disable auth on prometheus metrics
  metricsAuthDisabled: true

  saml:
    # Locations for keys used for signing and encryption. Only one of 'secret' or 'public_key_path'/'private_key_path' needs to be set. If all are set then the keys take precedence over the secret value
    # Secret is for a shared secret and if set, all components in anchore should have the exact same value in their configs.
    secret: ${ANCHORE_DB_PASSWORD}

  oauthEnabled: true
  oauthTokenExpirationSeconds: 3600

  # Set this to True to enable storing user passwords only as secure hashes in the db. This can dramatically increase CPU usage if you
  # don't also use oauth and tokens for internal communications (which requires keys/secret to be configured as well)
  # WARNING: you should not change this after a system has been initialized as it may cause a mismatch in existing passwords
  hashedPasswords: true

# Configuration for the analyzer pods that perform image analysis
# There may be many of these analyzers but best practice is to not have more than one per node since analysis
# is very IO intensive. Use of affinity/anti-affinity rules for scheduling the analyzers is future work.
anchoreAnalyzer:
  replicaCount: 1
  annotations: {traffic.sidecar.istio.io/excludeOutboundPorts: "5432"}

  # Enable the ability to read a user-supplied 'hints' file to allow users to override and/or augment the software artifacts that are discovered by anchore during its image analysis process.
  # Once enabled, the analyzer services will look for a file with a specific name, location and format located within the container image - /anchore_hints.json
  # For more info see - https://docs.anchore.com/current/docs/engine/engine_installation/configuration/content_hints
  enableHints: false

  configFile:
    # Anchore analyzer config file
    #
    # WARNING - malforming this file can cause the analyzer to fail on all image analysis
    #
    # Options for any analyzer module(s) that takes customizable input
    #
    # example configuration for the 'retrieve_files' analyzer, if installed
    retrieve_files:
      file_list:
        - '/etc/passwd'
        # - '/etc/services'
        # - '/etc/sudoers'

    # example configuration for the 'content_search' analyze, if installed
    secret_search:
      match_params:
        - MAXFILESIZE=10000
        - STOREONMATCH=n
      regexp_match:
        - "AWS_ACCESS_KEY=(?i).*aws_access_key_id( *=+ *).*(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9]).*"
        - "AWS_SECRET_KEY=(?i).*aws_secret_access_key( *=+ *).*(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=]).*"
        - "PRIV_KEY=(?i)-+BEGIN(.*)PRIVATE KEY-+"
        - "DOCKER_AUTH=(?i).*\"auth\": *\".+\""
        - "API_KEY=(?i).*api(-|_)key( *=+ *).*(?<![A-Z0-9])[A-Z0-9]{20,60}(?![A-Z0-9]).*"
        # - "ALPINE_NULL_ROOT=^root:::0:::::$"
    # content_search:
    #   match_params:
    #     - MAXFILESIZE=10000
    #   regexp_match:
    #     - "EXAMPLE_MATCH="

    # Uncomment the 'malware' section to enable use of the open-source ClamAV malware scanner to detect malicious code embedded in container images.
    # This scan occurs only at analysis time when the image content itself is available, and the scan results are available via the Engine API as well as
    # for consumption in new policy gates to allow gating of image with malware findings.
    # For more detailed configuration info see - https://docs.anchore.com/current/docs/engine/general/concepts/images/analysis/malware_scanning
    #
    malware:
      clamav:
        enabled: true
        db_update_enabled: true


# Pod configuration for the anchore engine api service.
anchoreApi:
  annotations: {traffic.sidecar.istio.io/excludeOutboundPorts: "5432"}

anchoreCatalog:
  annotations: {traffic.sidecar.istio.io/excludeOutboundPorts: "5432"}

# Pod configuration for the anchore engine policy service.
anchorePolicyEngine:
  annotations: {traffic.sidecar.istio.io/excludeOutboundPorts: "5432"}

# Pod configuration for the anchore engine simplequeue service.
anchoreSimpleQueue:
  annotations: {traffic.sidecar.istio.io/excludeOutboundPorts: "5432"}

# This section is used for configuring anchore enterprise.
anchoreEnterpriseGlobal:
  enabled: true
  # Name of kubernetes secret containing your license.yaml file.
  # Create this secret with the following command - kubectl create secret generic anchore-license --from-file=license.yaml=<PATH TO LICENSE.YAML>
  licenseSecretName: anchore-enterprise-license

  image: registry1.dsop.io/ironbank/anchore/enterprise/enterprise:2.4.0
  imagePullPolicy: IfNotPresent
  # Name of the kubernetes secret containing your dockerhub creds with access to the anchore enterprise images.
  # Create this secret with the following command - kubectl create secret docker-registry anchore-dockerhub-creds --docker-server=docker.io --docker-username=<USERNAME> --docker-password=<PASSWORD> --docker-email=<EMAIL_ADDRESS>
  imagePullSecretName: registry1-read-creds

# Configure the second postgres database instance for the enterprise feeds service.
# Only utilized if anchoreEnterpriseGlobal.enabled: true
anchore-feeds-db:
  # To use an external DB or Google CloudSQL, uncomment & set 'enabled: false'
  # externalEndpoint, postgresUser, postgresPassword & postgresDatabase are required values for external postgres
  enabled: false
  postgresUser: anchore
  postgresDatabase: anchorefeeds

  # Specify an external (already existing) postgres deployment for use.
  # Set to the host and port. eg. mypostgres.myserver.io:5432
  externalEndpoint: db.example.com

# Configure & enable the Anchore Enterprise on-prem feeds service.
anchoreEnterpriseFeeds:
  # If enabled is set to false, set anchore-feeds-db.enabled to false to ensure that helm doesn't stand up a unneccessary postgres instance.
  enabled: true
  apiOnly: true
  annotations: {traffic.sidecar.istio.io/excludeOutboundPorts: "5432"}

# Configure the Anchore Enterprise reporting component.
anchoreEnterpriseReports:
  enabled: true
  annotations: {traffic.sidecar.istio.io/excludeOutboundPorts: "5432"}

# Configure the Anchore Enterprise notifications component.
anchoreEnterpriseNotifications:
  enabled: true
  annotations: {traffic.sidecar.istio.io/excludeOutboundPorts: "5432"}

# Configure the Anchore Enterprise UI.
anchoreEnterpriseUi:
  # If enabled is set to false, set anchore-ui-redis.enabled to false to ensure that helm doesn't stand up a unneccessary redis instance.
  enabled: true
  image: registry1.dsop.io/ironbank/anchore/enterpriseui/enterpriseui:2.4.0
  imagePullPolicy: IfNotPresent
  # imagePullSecretName: repo1-registry-read-creds

anchore-ui-redis:
  # existingSecret: redis-creds
  # existingSecretPasswordKey: redis-password
  image:
    registry: registry1.dsop.io
    repository: ironbank/opensource/redis/redis6
    tag: 6.0.4
  cluster:
    enabled: false
  persistence:
    enabled: false

  # The command value for the redis chart needs to be set here to work with the IronBank redis image.
  # By default, the Redis chart tries to run a 'run.sh' script that is not present in IronBank images.
  # Setting the value of command to null /should/ automatically fix the problem, but the value isn't properly unset for dependency subcharts  (https://github.com/helm/helm/issues/5184)
  master:
    command: redis-server

  slave:
    command: redis-server
  # To use an external redis endpoint, uncomment to set 'enabled: false'
  # enabled: false

  # If 'enabled: false', specify an external redis endpoint -
  # eg redis://:<password>@hostname:6379
  externalEndpoint: Null
