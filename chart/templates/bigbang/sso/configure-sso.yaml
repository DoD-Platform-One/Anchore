{{- if .Values.sso.enabled }}
# Job to perform integration of SSO to Anchore
apiVersion: batch/v1
kind: Job
metadata:
  name: configure-sso
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: configure-sso
    spec:
      {{- if .Values.imagePullSecretName }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecretName }}
      {{- end }}
      containers:
        - name: configure-sso
          image: {{ .Values.image }}
          securityContext: {{- toYaml .Values.sso.containerSecurityContext | nindent 12 }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              cd "/tmp"

              # Extract SAML URL and name
              SSO_NAME=$(grep -oP '^\s*"name"\s*:\s*"\K(.*)(?=",?\s*$)' anchore-sso.json)

              # Wait for the given SAML IdP metadata url to exist and give data back
              while [ $(curl -sw '%{http_code}' "{{ .Values.sso.idpMetadataUrl }}" -o /dev/null) -ne 200 ]; do
                echo "Waiting for IdP metadata..."
                sleep 10;
              done

              echo "IdP URL is live..."

              # Use the IDP_URL to get the metadata XML
              idp_metadata_xml_raw=$(curl -s {{ .Values.sso.idpMetadataUrl }})
              # Escape quotes so that it formats nicely in the JSON
              # Quadruple escape ensures a literal double escape which ensures our sed replace later prints a literal escape
              idp_metadata_xml=$(echo ${idp_metadata_xml_raw} | sed 's/"/\\\\"/g')

              # Wait for Anchore Engine API to go live
              while [ $(curl -sw '%{http_code}' "http://{{ template "enterprise.api.fullname" . }}:{{ .Values.api.service.port }}/v2/openapi.json" -o /dev/null) -ne 200 ]; do
                echo "Waiting for Anchore API..."
                sleep 10;
              done

              echo "Anchore Engine is live..."

              # If a SAML IdP doesn't exist with the given name, add this. Otherwise update the existing entry
              if [ $(curl -sw '%{http_code}' -u "admin:${ANCHORE_ADMIN_PASSWORD}" "http://{{ template "enterprise.api.fullname" . }}:{{ .Values.api.service.port }}/v2/rbac-manager/saml/idps/${SSO_NAME}" -o /dev/null) -ne 200 ]; then
                echo "Applying SAML config to Anchore..."
                curl -vvv --fail -u "admin:${ANCHORE_ADMIN_PASSWORD}" -d "$(sed "s@XML_PLACEHOLDER@${idp_metadata_xml}@g" anchore-sso.json)" -H "Content-Type: application/json" --request POST http://{{ template "enterprise.api.fullname" . }}:{{ .Values.api.service.port }}/v2/rbac-manager/saml/idps
              else
                echo  "SAML config already exists, updating..."
                curl -vvv --fail -u "admin:${ANCHORE_ADMIN_PASSWORD}" -d "$(sed "s@XML_PLACEHOLDER@${idp_metadata_xml}@g" anchore-sso.json)" -H "Content-Type: application/json" --request PUT "http://{{ template "enterprise.api.fullname" . }}:{{ .Values.api.service.port }}/v2/rbac-manager/saml/idps/${SSO_NAME}"
              fi

              {{- if eq .Values.istio.injection "enabled" }}
              until curl -fsI http://localhost:15021/healthz/ready; do
                echo "Waiting for Istio sidecar proxy..."
                sleep 3
              done
              {{ if and .Values.istio.enabled (eq .Values.istio.injection "enabled") }}
              sleep 5
              echo "Stopping the istio proxy..."
              curl -X POST http://localhost:15020/quitquitquit
              {{ end }}
              {{- end }}
          envFrom:
            - secretRef:
                name: {{ template "enterprise.fullname" . }}
          volumeMounts:
            - name: anchore-sso
              mountPath: "/tmp"
              readOnly: true
          resources:
            {{ toYaml .Values.sso.resources | nindent 12 }}
      volumes:
        - name: anchore-sso
          secret:
            secretName: anchore-sso
      restartPolicy: OnFailure
{{- end }}
