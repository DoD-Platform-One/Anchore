{{- if and (hasKey (index .Values "anchore-feeds-db") "enabled")  }}
{{- if and (not (index .Values "anchore-feeds-db" "enabled")) .Values.anchoreEnterpriseGlobal.enabled }}
# Job to sync db and db user with external postgres for Anchore's feeds db
apiVersion: batch/v1
kind: Job
metadata:
  name: ensure-feeds-db
  annotations:
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: ensure-feeds-db
    spec:
      imagePullSecrets:
      {{- range (index .Values "anchore-feeds-db" "global" "imagePullSecrets") }}
        - name: {{ . }}
      {{- end }}
      containers:
        - name: psql
          image: "{{ (index .Values "anchore-feeds-db" "image" "registry") }}/{{ (index .Values "anchore-feeds-db" "image" "repository") }}:{{ (index .Values "anchore-feeds-db" "image" "tag") }}"
          {{- if or (and .Values.postgresqlSuperUser.postgresUsername .Values.postgresqlSuperUser.postgresPassword) .Values.postgresqlSuperUser.existingSecret }}
          command:
            - /bin/bash
            - -exc
            - |
              echo "Ensure Anchore Feeds DB..."
              psql -tc "SELECT 1 FROM pg_database WHERE datname = '$FEEDS_DB'" | grep -q 1 || psql -c "CREATE DATABASE $FEEDS_DB"
              psql -tc "SELECT 1 FROM pg_roles WHERE rolname = '$FEEDS_USER'" | grep -q 1 && psql -c "ALTER USER $FEEDS_USER WITH PASSWORD '$FEEDS_PASSWORD'; GRANT ALL PRIVILEGES ON DATABASE $FEEDS_DB TO $FEEDS_USER;" | grep -q GRANT || psql -c "CREATE USER   $FEEDS_USER WITH PASSWORD '$FEEDS_PASSWORD'; GRANT ALL PRIVILEGES ON DATABASE $FEEDS_DB TO $FEEDS_USER;"
              {{- if eq .Values.istio.injection "enabled" }}
              until curl -fsI http://localhost:15021/healthz/ready; do
                echo "Waiting for Istio sidecar proxy..."
                sleep 3
              done
              sleep 5
              echo "Stopping the istio proxy..."
              curl -X POST http://localhost:15020/quitquitquit
              {{- end }}
          env:
            - name: FEEDS_USER
              valueFrom:
                secretKeyRef:
                  name: feeds-db-credentials
                  key: PGUSER
            - name: FEEDS_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.anchoreEnterpriseFeeds.existingSecret }}
                  name: {{ .Values.anchoreEnterpriseFeeds.existingSecret }}
                  key: ANCHORE_FEEDS_DB_PASSWORD
                  {{- else }}
                  name: feeds-db-credentials
                  key: PGPASSWORD
                  {{- end }}
            - name: FEEDS_DB
              valueFrom:
                secretKeyRef:
                  name: feeds-db-credentials
                  key: FEEDS_DB
          envFrom:
            - secretRef:
                name: {{ .Values.postgresqlSuperUser.existingSecret | default "superuser-db-credentials"}}
          {{- else }}
          command:
            - /bin/bash
            - -exc
            - |
              echo "Ensure Anchore Feeds DB..."

              psql -tc "SELECT 1 FROM pg_database WHERE datname = '$FEEDS_DB'" | grep -q 1 || psql -c "CREATE DATABASE $FEEDS_DB"
              psql -tc "SELECT 1 FROM pg_roles WHERE rolname = '$PGUSER'" | grep -q 1 && psql -c "ALTER USER $PGUSER WITH PASSWORD '$PGPASSWORD'; GRANT ALL PRIVILEGES ON DATABASE $FEEDS_DB TO $PGUSER;" | grep -q GRANT || psql -c "CREATE USER $PGUSER WITH PASSWORD '$PGPASSWORD'; GRANT ALL PRIVILEGES ON DATABASE $FEEDS_DB TO $PGUSER;"
              {{- if eq .Values.istio.injection "enabled" }}
              until curl -fsI http://localhost:15021/healthz/ready; do
                echo "Waiting for Istio sidecar proxy..."
                sleep 3
              done
              sleep 5
              echo "Stopping the istio proxy..."
              curl -X POST http://localhost:15020/quitquitquit
              {{- end }}
          {{- if .Values.anchoreEnterpriseFeeds.existingSecret }}
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.anchoreEnterpriseFeeds.existingSecret }}
                  key: ANCHORE_FEEDS_DB_PASSWORD
          {{- end }}
          envFrom:
            - secretRef:
                name: feeds-db-credentials
          {{- end }}
          resources:
            {{ toYaml .Values.ensureDbJobs.resources | nindent 12 }}
      restartPolicy: OnFailure
{{- end }}
{{- end }}
